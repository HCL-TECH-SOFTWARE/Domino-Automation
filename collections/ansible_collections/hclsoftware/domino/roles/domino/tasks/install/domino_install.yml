---

# ----- INSTALL DOMINO

- name: Install Domino binaries
  become: true
  args:
    chdir: '{{ domino__domino_install }}/linux64/'
  ansible.builtin.shell:
    cmd: './install -f {{ domino__response_file }} -i silent'
  register: install_result
  changed_when:
    - install_result.changed
    - install_result.rc == 0
  failed_when:
    - '"Failed" in install_result.stdout'


# ----- PREPARE DOMINO SETUP FILES

- name: Copy and customize One-touch Setup config file
  ansible.builtin.template:
    src: auto_config_domino14.json.j2
    dest: '{{ domino__install_path }}/auto_config_domino14.json'
    mode: u=rw,g=r,o=r

- name: Check One-touch Setup JSON file
  become: true
  become_user: notes
  environment:
    LD_LIBRARY_PATH: /opt/hcl/domino/notes/latest/linux
  ansible.builtin.shell:
    chdir: '/local/notesdata'
    cmd: '/opt/hcl/domino/notes/latest/linux/validjson {{ domino__install_path }}/auto_config_domino14.json -default'
  register: json_result
  changed_when:
    - json_result.stderr != ''
  failed_when:
    - '"Failed" in json_result.stdout'


# ----- SETUP DOMINO

- name: Setup Domino server for the first run
  become: true
  become_user: notes
  ansible.builtin.shell:
    chdir: '/local/notesdata'
    cmd: '/opt/hcl/domino/bin/server -autoconf {{ domino__install_path }}/auto_config_domino14.json 2>&1 &'
  register: setup_result
  changed_when:
    - setup_result.changed
    - setup_result.rc == 0

- name: Wait for 1 minute to finish the initialization
  ansible.builtin.pause:
    minutes: 1

- name: Wait until HTTP task is logged in the console.log file
  become: true
  ansible.builtin.wait_for:
    path: /local/notesdata/IBM_TECHNICAL_SUPPORT/console.log
    search_regex: 'HTTP Server: Started'
    timeout: 120
  register: setup_wait_result
  changed_when:
    - '"Timeout when waiting" in setup_wait_result'

- name: Fetch server IDs for newly created additional servers
  ansible.builtin.fetch:
    src: '/local/notesdata/{{ server_id }}.id'
    dest: '{{ domino__input_data_location }}/{{ domino__domino_domain | lower }}/ids/server-{{ server_id | lower }}.id'
    flat: true
  loop: '{{ domino__additional_servers }}'
  loop_control:
    loop_var: server_id
  when: domino__setup_additional_servers


# ----- STOP DOMINO

- name: Manually stop the Domino server
  become: true
  become_user: notes
  ansible.builtin.shell:
    chdir: '/local/notesdata'
    cmd: '/opt/hcl/domino/bin/server -q 2>&1 &'
  register: first_stop_result
  failed_when:
    - first_stop_result.changed
    - '"Waiting for processes to exit" not in first_stop_result.stdout'
  changed_when:
    - first_stop_result.changed
    - first_stop_result.rc == 0

- name: Wait for 1 minute to finish server stop
  ansible.builtin.pause:
    minutes: 1

- name: Wait until the Domino server is fully stopped
  become: true
  ansible.builtin.wait_for:
    path: /local/notesdata/IBM_TECHNICAL_SUPPORT/console.log
    search_regex: 'Server shutdown complete'
    timeout: 120
  register: stop_wait_result
  failed_when:
    - stop_wait_result.changed
    - '"Timeout when waiting" not in stop_wait_result.stdout'
  changed_when:
    - stop_wait_result.changed
    - '"Timeout when waiting" in stop_wait_result.stdout'


# ----- START DOMINO AS A SERVICE

- name: Start and enable Domino service
  become: true
  ansible.builtin.service:
    name: domino
    state: started
    enabled: true
