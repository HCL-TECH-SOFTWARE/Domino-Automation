---
- name: Set the flag to install the product "{{ product }}"
  ansible.builtin.set_fact:
    'domino__install_{{ product }}': 'true'

- name: Get the latest version
  vars:
    version: '{{ (software_latest_result.list | selectattr("product", "equalto", product) | list | first).version }}'
    fixpack: '{{ (software_latest_result.list | selectattr("product", "equalto", product) | list | first).fixpack }}'
    interim: '{{ (software_latest_result.list | selectattr("product", "equalto", product) | list | first).interim }}'
  ansible.builtin.set_fact:
    latest_version: '{{ version | trim }}{{ fixpack | trim }}{{ interim | trim }}'

- name: Use a special version (instead of the latest one), if it is specified in parameters
  vars:
    requested_version: '{{ vars["domino__" + product + "_version"] | default("") }}'
  ansible.builtin.set_fact:
    version_to_install: '{{ (requested_version | length > 0) | ternary(requested_version, latest_version) }}'

- name: Perform special tasks necessary just for Domino
  when: product == 'domino'
  block:
    - name: 'Strip main version, FixPack version and Interim Fix version from the version string: {{ version_to_install }}'
      vars:
        tmp_interim: '{{ (version_to_install | upper).split("IF").1 | default("") }}'
        tmp_domino_fp: '{{ (version_to_install | upper).split("IF").0 | default("") }}'
        tmp_fixpack: '{{ (tmp_domino_fp | upper).split("FP").1 | default("") }}'
      ansible.builtin.set_fact:
        domino_main_version: '{{ (tmp_domino_fp | upper).split("FP").0 | default("") }}'
        domino_fixpack: '{{ (tmp_fixpack | trim | length > 0) | ternary("FP" + tmp_fixpack, "") }}'
        domino_interim: '{{ (tmp_interim | trim | length > 0) | ternary("IF" + tmp_interim, "") }}'

    # Process FixPack, if present
    - name: Add FixPack to the list of products and to the products info – {{ domino_fixpack }}
      vars:
        index: '{{ product_info | ansible.utils.index_of("eq", "fp", "name") }}'
        tmp_fp_version: '{{ domino_main_version }}{{ domino_fixpack }}'
        installer: >-
          {{ (software_result.list | selectattr("product", "equalto", product)
                                  | selectattr("version", "equalto", tmp_fp_version)
                                  | list | first).filename }}
        first_installer: '{{ installer.split(",").0 }}'
        fileid: >-
          {{ (software_result.list | selectattr("product", "equalto", product)
                                  | selectattr("version", "equalto", version_to_install)
                                  | list | first).fileid }}
        checksum: >-
          {{ (software_result.list | selectattr("product", "equalto", product)
                                  | selectattr("version", "equalto", tmp_fp_version)
                                  | list | first).checksum }}
      ansible.utils.update_fact:
        updates:
          - path: 'product_info.{{ index }}.version'
            value: '{{ tmp_fp_version }}'
          - path: 'product_info.{{ index }}.installer'
            value: '{{ first_installer }}'
          - path: 'product_info.{{ index }}.fileid'
            value: '{{ fileid }}'
          - path: 'product_info.{{ index }}.checksum'
            value: '{{ checksum }}'
          - path: 'product_info.{{ index }}.install'
            value: true
          - path: 'product_info.{{ index }}.do_installation'
            value: true
      changed_when: false
      ignore_errors: true
      register: fp_info_updated_result
      when:
        - domino_fixpack | trim | length > 0

    - name: Store the FixPack updated value into the master fact
      ansible.builtin.set_fact:
        product_info: '{{ fp_info_updated_result.product_info }}'
      when:
        - domino_fixpack | trim | length > 0
        - fp_info_updated_result is not failed

    - name: Set the flag to install FixPack
      ansible.builtin.set_fact:
        domino__install_fp: true
      when:
        - domino_fixpack | trim | length > 0

    - name: When the FixPack version is incorrectly specified, fail with a warning
      ansible.builtin.fail:
        msg: |
          Domino FixPack version specified incorrectly: {{ domino_main_version }}{{ domino_fixpack }}

          Please check and specify the correct version, or remove the version number completely.
          When no version is specified, the latest one is used.
          You can find the list of correct prodcut versions in this subdirectory:
          {{ domino__software_directory }}
      when:
        - domino_fixpack | trim | length > 0
        - fp_info_updated_result is failed

    # Process Interim fix, if present
    - name: Add Interim fix to the list of products and to the products info – {{ domino_interim }}
      vars:
        index: '{{ product_info | ansible.utils.index_of("eq", "if", "name") }}'
        tmp_if_version: '{{ domino_main_version }}{{ domino_fixpack }}{{ domino_interim }}'
        installer: >-
          {{ (software_result.list | selectattr("product", "equalto", product)
                                  | selectattr("version", "equalto", tmp_if_version)
                                  | list | first).filename }}
        fileid: >-
          {{ (software_result.list | selectattr("product", "equalto", product)
                                  | selectattr("version", "equalto", version_to_install)
                                  | list | first).fileid }}
        checksum: >-
          {{ (software_result.list | selectattr("product", "equalto", product)
                                  | selectattr("version", "equalto", tmp_if_version)
                                  | list | first).checksum }}
      ansible.utils.update_fact:
        updates:
          - path: 'product_info.{{ index }}.version'
            value: '{{ tmp_if_version }}'
          - path: 'product_info.{{ index }}.installer'
            value: '{{ installer }}'
          - path: 'product_info.{{ index }}.fileid'
            value: '{{ fileid }}'
          - path: 'product_info.{{ index }}.checksum'
            value: '{{ checksum }}'
          - path: 'product_info.{{ index }}.install'
            value: true
          - path: 'product_info.{{ index }}.do_installation'
            value: true
      changed_when: false
      ignore_errors: true
      register: if_info_updated_result
      when:
        - domino_interim | trim | length > 0

    - name: Store the Interim fix updated value into the master fact
      ansible.builtin.set_fact:
        product_info: '{{ if_info_updated_result.product_info }}'
      when:
        - domino_interim | trim | length > 0
        - if_info_updated_result is not failed

    - name: Set the flag to install Interim fix
      ansible.builtin.set_fact:
        domino__install_if: true
      when:
        - domino_interim | trim | length > 0

    - name: When the Interim fix version is incorrectly specified, fail with a warning
      ansible.builtin.fail:
        msg: |
          Domino Interim fix version specified incorrectly: {{ domino_main_version }}{{ domino_fixpack }}{{ domino_interim }}

          Please check and specify the correct version, or remove the version number completely.
          When no version is specified, the latest one is used.
          You can find the list of correct prodcut versions in this subdirectory:
          {{ domino__software_directory }}
      when:
        - domino_interim | trim | length > 0
        - if_info_updated_result is failed


    - name: Rewrite the Domino version (keep only mail version, without FP and IF)
      ansible.builtin.set_fact:
        version_to_install: '{{ domino_main_version }}'


# Before Nomad version 1.0.13, it was distributed in two Domino versions (V12/V14)
- name: Perform a special task necessary just for Nomad – change version to {{ version_to_install }}-{{ domino_main_version }}
  ansible.builtin.set_fact:
    version_to_install: '{{ version_to_install }}-{{ domino_main_version }}'
  when:
    - product == 'nomad'
    - 'version_to_install is version("1.0.13", "<", version_type="loose")'

- name: Perform a special task necessary just for DRAPI (< 1.1.5) – change version to {{ version_to_install }}-{{ domino_main_version }}
  vars:
    domino_main_version_major: '{{ domino_main_version.split(".").0 }}'
  ansible.builtin.set_fact:
    version_to_install: '{{ version_to_install }}-{{ domino_main_version_major }}'
  when:
    - product == 'domrestapi'
    - 'version_to_install is version("1.1.5", "<", version_type="loose")'


- name: Perform a special task necessary just for DRAPI (>= 1.1.5) – change version to {{ version_to_install }}-{{ domino_main_version }}
  vars:
    domino_main_version_major: '{{ domino_main_version.split(".").0 }}'
  ansible.builtin.set_fact:
    version_to_install: '{{ version_to_install }}-{{ domino_main_version }}'
  when:
    - product == 'domrestapi'
    - 'version_to_install is version("1.1.5", ">=", version_type="loose")'


- name: Update the software info in the dictionary - {{ product }} {{ version_to_install }}
  vars:
    index: '{{ product_info | ansible.utils.index_of("eq", product, "name") }}'
    installer: >-
      {{ (software_result.list | selectattr("product", "equalto", product)
                               | selectattr("version", "equalto", version_to_install)
                               | list | first).filename }}
    fileid: >-
      {{ (software_result.list | selectattr("product", "equalto", product)
                               | selectattr("version", "equalto", version_to_install)
                               | list | first).fileid }}
    checksum: >-
      {{ (software_result.list | selectattr("product", "equalto", product)
                               | selectattr("version", "equalto", version_to_install)
                               | list | first).checksum }}
  ansible.utils.update_fact:
    updates:
      - path: 'product_info.{{ index }}.version'
        value: '{{ version_to_install }}'
      - path: 'product_info.{{ index }}.installer'
        value: '{{ installer.split(",").0 }}'
      - path: 'product_info.{{ index }}.fileid'
        value: '{{ fileid }}'
      - path: 'product_info.{{ index }}.checksum'
        value: '{{ checksum }}'
      - path: 'product_info.{{ index }}.install'
        value: true
      - path: 'product_info.{{ index }}.do_installation'
        value: true
  # changed_when: false
  ignore_errors: true
  register: product_info_updated_result

- name: Store the product updated value into the master fact
  ansible.builtin.set_fact:
    product_info: '{{ product_info_updated_result.product_info }}'
  when:
    - product_info_updated_result is not failed

- name: When the product version is incorrectly specified, fail with a warning
  ansible.builtin.fail:
    msg: |
      Product version specified incorrectly: {{ product }} {{ version_to_install }}

      Please check and specify the correct version, or remove the version number completely.
      When no version is specified, the latest one is used.
      You can find the list of correct prodcut versions in this subdirectory:
      {{ domino__software_directory }}
  when:
    - product_info_updated_result is failed
