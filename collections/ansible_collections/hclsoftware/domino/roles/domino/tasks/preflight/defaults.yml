---
# ---------- Calculate values for parameters not explicitely specified in values

- name: Set default value for Domino server name, if not set in values
  ansible.builtin.set_fact:
    domino__server_name: '{{ inventory_hostname | capitalize }}'
  when: domino__server_name | length == 0

- name: Set default value for Domino hostname, if not set in values
  ansible.builtin.set_fact:
    # domino__domino_hostname: '{{ ansible_host }}'
    domino__domino_hostname: '{{ ansible_nodename }}'
  when: domino__domino_hostname | length == 0

- name: Set default value for Domino domain, if not set in values
  ansible.builtin.set_fact:
    domino__domino_domain: '{{ domino__org_name }}'
  when: domino__domino_domain | length == 0

- name: Set directory to store temporary files
  ansible.builtin.set_fact:
    tmp_dir: '{{ lookup("env", "TMPDIR") | default("/tmp", true) }}'

- name: Set default value for user CSV file location, if not set in values
  ansible.builtin.set_fact:
    domino__input_data_users: '{{ domino__input_data_location | realpath }}/{{ domino__domino_domain | lower }}/{{ domino__users_file }}'
  when:
    - domino__register_users
    - domino__input_data_users | length == 0


# ---------- Necessary for assert

- name: Assign values to variables so they could be asserted
  ansible.builtin.set_fact:
    domino__input_data_location: '{{ domino__input_data_location | realpath }}'
    domino__input_data_users: '{{ domino__input_data_users | realpath }}'


# ---------- Erase information about product installation

# Initiallly set to False, unless explicitely specified in the vars.
# The value changes to True if a product is in domino__install_products parameter.
- name: Initially set all products to NOT install.
  ansible.builtin.set_fact:
    'domino__install_{{ product }}': '{{ vars["domino__install_" + product] | default(false) }}'
  loop: '{{ domino__all_products + ["fp"] + ["if"] }}'
  loop_control:
    loop_var: product

# Initiallly set to False, unless explicitely specified in the vars.
# The value changes to True if a product is later inspected as installed.
- name: Initially set all products as not installed on the server.
  ansible.builtin.set_fact:
    '{{ product }}_is_installed': '{{ vars[product + "_is_installed"] | default(false) }}'
  loop: '{{ domino__all_products + ["fp"] + ["if"] }}'
  loop_control:
    loop_var: product


# ---------- Create directories on a local workstation

# Make sure the directory for storing reports exists
- name: Create reports directory '{{ domino__reports_dir }}'
  ansible.builtin.file:
    path: '{{ domino__reports_dir }}'
    state: directory
    mode: u=rwx,g=rx,o=rx
  when: domino__save_reports
  delegate_to: localhost


# ---------- Calculate parameters for One-touch Setup JSON file

- name: Calculate OTS parameter [HTTPPublicURLs]
  vars:
    temp_customlogindb: '{{ domino__use_custom_login | ternary("/" ~ domino__custom_login_db ~ "/*:", "") }}'
  ansible.builtin.set_fact:
    ots_httppublicurls: '/iwaredir.nsf/*:/robots.txt:{{ temp_customlogindb }}/.well-known*'

- name: Calculate OTS parameter [LF_LoginFormDB, LF_LoginForm]
  ansible.builtin.set_fact:
    ots_lf_loginformdb: '{{ domino__use_custom_login | ternary(domino__custom_login_db, domino__default_login_db) }}'
    ots_lf_loginformform: '{{ domino__use_custom_login | ternary(domino__custom_login_form, domino__default_login_form) }}'

# - fail:


# ---------- Update parameters values

- name: Set the full path value for custom login form database, if not set in values
  ansible.builtin.set_fact:
    domino__custom_login_db: '{{ domino__input_data_location | realpath }}/{{ domino__domino_domain | lower }}/{{ domino__custom_login_db }}'
  when:
    - domino__use_custom_login
    - domino__custom_login_db[0] != '/'
