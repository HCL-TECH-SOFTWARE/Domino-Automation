---
- name: Check if Traveler binary file exists
  ansible.builtin.stat:
    path: /opt/hcl/domino/notes/latest/linux/traveler
  register: traveler_installed_result

- name: Perform tasks when Traveler server is already installed
  when: traveler_installed_result.stat.exists
  block:
    - name: Get Traveler version from a file
      ansible.builtin.shell:
        chdir: /opt/hcl/domino/notes/latest/linux/Traveler/license
        # cmd: set -o pipefail && grep "HCL Traveler" notices.txt | cut -d ' ' -f 3
        # Cut off the substring "HCL Traveler" and replace " Fix Pack " with "FP"
        cmd: set -o pipefail && grep "HCL Traveler" notices.txt | sed "s/HCL Traveler //" | sed "s/ Fix Pack /FP/"
      changed_when: false
      register: traveler_version_result

    - name: Store installed Traveler version
      ansible.builtin.set_fact:
        traveler_version: '{{ traveler_version_result.stdout }}'

    - name: Mark Traveler as installed (single variable)
      ansible.builtin.set_fact:
        traveler_is_installed: true

    - name: Mark Traveler as installed (sw dictionary)
      vars:
        index: '{{ product_info | ansible.utils.index_of("eq", "traveler", "name") }}'
        traveler_target_version: '{{ product_info | json_query("[?name==`traveler`].version") | first  }}'
        target_version_is_newer: '{{ traveler_version is version(traveler_target_version, "<", version_type="loose") }}'
      ansible.utils.update_fact:
        updates:
          - path: 'product_info.{{ index }}.installed'
            value: true
          - path: 'product_info.{{ index }}.installed_version'
            value: '{{ traveler_version }}'
          - path: 'product_info.{{ index }}.do_installation'
            value: '{{ target_version_is_newer }}'
      changed_when: false
      register: product_info_updated_result

    - name: Store the updated value into the master fact
      ansible.builtin.set_fact:
        product_info: '{{ product_info_updated_result.product_info }}'
