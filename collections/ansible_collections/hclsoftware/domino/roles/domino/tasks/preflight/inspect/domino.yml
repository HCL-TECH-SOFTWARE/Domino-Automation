---
- name: Check if Domino notes.ini file exists
  ansible.builtin.stat:
    path: /local/notesdata/notes.ini
  register: domino_installed_result

- name: Perform tasks when Domino server is already installed
  when: domino_installed_result.stat.exists
  block:
    # Example of the line in notes.ini: FaultRecovery_Build=Release 14.0FP2
    # The command cuts away characters right to the space
    - name: Get Domino version from a file
      ansible.builtin.shell:
        chdir: /local/notesdata
        cmd: set -o pipefail && grep "FaultRecovery_Build" notes.ini | cut -d ' ' -f 2
      changed_when: false
      register: domino_version_result

# --- Split version string into mail version, fixpack, interim fix

    - name: Check the string used for Interim Fix ("IF" or "HF")
      ansible.builtin.set_fact:
        interim_string: '{{ ("HF" in domino_version_result.stdout) | ternary("HF", "IF") }}'

    - name: Strip main version, FixPack version and Interim Fix version from the version string - {{ domino_version_result.stdout }}
      vars:
        tmp_interim: '{{ (domino_version_result.stdout | upper).split(interim_string).1 | default("") }}'
        tmp_domino_fp: '{{ (domino_version_result.stdout | upper).split(interim_string).0 | default("") }}'
        tmp_fixpack: '{{ (tmp_domino_fp | upper).split("FP").1 | default("") }}'
      ansible.builtin.set_fact:
        domino_main_version: '{{ (tmp_domino_fp | upper).split("FP").0 | default("") }}'
        fixpack_version: '{{ (tmp_fixpack | trim | length > 0) | ternary("FP" + tmp_fixpack, "") }}'
        interim_version: '{{ (tmp_interim | trim | length > 0) | ternary(interim_string + tmp_interim, "") }}'

    - name: Calculate merged FixPack and Interim Fix versions
      ansible.builtin.set_fact:
        domino_fp_version: '{{ domino_main_version }}{{ fixpack_version }}'
        domino_fp_if_version: '{{ domino_main_version }}{{ fixpack_version }}{{ interim_version }}'

    - name: Print target versions for Domino, FP and IF
      ansible.builtin.debug:
        msg: |
          domino_main_version: {{ domino_main_version }}
          domino_fixpack: {{ domino_fixpack }}
          domino_interim: {{ domino_interim }}

    # --- Process Domino version

    - name: Process Domino version
      block:
        # - name: Compare existing version and target version
        #   vars:
        #     domino_target_version: '{{ product_info | json_query("[?name==`domino`].version") | first  }}'
        #   debug:
        #     msg: |
        #       - NEW: {{ domino_target_version }}
        #       - CURRENT: {{ domino_main_version }}
        #       - IS NEW BIGGER: {{ domino_main_version is version(domino_target_version, "<", version_type="loose") }}

        - name: Mark Domino as installed (single variable) - {{ domino_main_version }}
          ansible.builtin.set_fact:
            domino_is_installed: true

        - name: Mark Domino as installed (sw dictionary)
          vars:
            index: '{{ product_info | ansible.utils.index_of("eq", "domino", "name") }}'
            domino_target_version: '{{ product_info | json_query("[?name==`domino`].version") | first  }}'
            target_version_is_newer: '{{ domino_main_version is version(domino_target_version, "<", version_type="loose") }}'
          ansible.utils.update_fact:
            updates:
              - path: 'product_info.{{ index }}.installed'
                value: true
              - path: 'product_info.{{ index }}.installed_version'
                value: '{{ domino_main_version }}'
              - path: 'product_info.{{ index }}.do_installation'
                value: '{{ target_version_is_newer }}'
          changed_when: false
          register: domino_version_updated_result

        - name: Store the updated value into the master fact
          ansible.builtin.set_fact:
            product_info: '{{ domino_version_updated_result.product_info }}'

    # --- Process FixPack version

    - name: Process FixPack version
      when: fixpack_version | trim | length > 0
      block:
        - name: Mark FixPack as installed (single variable) - {{ domino_main_version }}{{ fixpack_version }}
          ansible.builtin.set_fact:
            fp_is_installed: true

        - name: Mark FixPack as installed (sw dictionary)
          vars:
            index: '{{ product_info | ansible.utils.index_of("eq", "fp", "name") }}'
            fp_target_version: '{{ domino_main_version }}{{ domino_fixpack }}'
            target_version_is_newer: '{{ domino_fp_version is version(fp_target_version, "<", version_type="loose") }}'
          ansible.utils.update_fact:
            updates:
              - path: 'product_info.{{ index }}.installed'
                value: true
              - path: 'product_info.{{ index }}.installed_version'
                value: '{{ domino_main_version }}{{ fixpack_version }}'
              - path: 'product_info.{{ index }}.do_installation'
                value: '{{ target_version_is_newer }}'
          changed_when: false
          register: fixpack_version_updated_result

        - name: Store the updated value into the master fact
          ansible.builtin.set_fact:
            product_info: '{{ fixpack_version_updated_result.product_info }}'

    # --- Process Interim fix version

    - name: Process Interim fix version
      when: interim_version | trim | length > 0
      block:
        - name: Mark Interim fix as installed (single variable) - {{ domino_main_version }}{{ fixpack_version }}{{ interim_version }}
          ansible.builtin.set_fact:
            if_is_installed: true

        - name: Mark Interim fix as installed (sw dictionary)
          vars:
            index: '{{ product_info | ansible.utils.index_of("eq", "if", "name") }}'
            if_target_version: '{{ domino_main_version }}{{ domino_fixpack }}{{ domino_interim }}'
            target_version_is_newer: '{{ domino_fp_if_version is version(if_target_version, "<", version_type="loose") }}'
          ansible.utils.update_fact:
            updates:
              - path: 'product_info.{{ index }}.installed'
                value: true
              - path: 'product_info.{{ index }}.installed_version'
                value: '{{ domino_main_version }}{{ fixpack_version }}{{ interim_version }}'
              - path: 'product_info.{{ index }}.do_installation'
                value: '{{ target_version_is_newer }}'
          changed_when: false
          register: interim_version_updated_result

        - name: Store the updated value into the master fact
          ansible.builtin.set_fact:
            product_info: '{{ interim_version_updated_result.product_info }}'
