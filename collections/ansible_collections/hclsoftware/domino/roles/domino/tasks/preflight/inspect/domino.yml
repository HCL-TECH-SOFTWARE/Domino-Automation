---
- name: Check if Domino notes.ini file exists
  ansible.builtin.stat:
    path: /local/notesdata/notes.ini
  register: domino_installed_result

- name: Perform tasks when Domino server is already installed
  when: domino_installed_result.stat.exists
  block:
    # Example of the line in notes.ini: FaultRecovery_Build=Release 14.0FP2
    # The command cuts away characters right to the space (cut -d ' ' -f 2)
    # ...and left to the underscore (| cut -d '_' -f 1)
    # Undescore is used in Early Access versions (example: Build V1450_04162025)
    - name: Get Domino version from a file
      ansible.builtin.shell:
        chdir: /local/notesdata
        cmd: set -o pipefail && grep "FaultRecovery_Build" notes.ini | cut -d ' ' -f 2 | cut -d '_' -f 1
      changed_when: false
      register: domino_version_result

# --- Split version string into mail version, fixpack, interim fix

    - name: Check the string used for Interim Fix ("IF" or "HF")
      ansible.builtin.set_fact:
        interim_string: '{{ ("HF" in domino_version_result.stdout) | ternary("HF", "IF") }}'

    - name: Strip main version, FixPack version and Interim Fix version from the version string - {{ domino_version_result.stdout }}
      vars:
        tmp_interim: '{{ (domino_version_result.stdout | upper).split(interim_string).1 | default("") }}'
        tmp_domino_fp: '{{ (domino_version_result.stdout | upper).split(interim_string).0 | default("") }}'
        tmp_fixpack: '{{ (tmp_domino_fp | upper).split("FP").1 | default("") }}'
      ansible.builtin.set_fact:
        domino_main_version: '{{ (tmp_domino_fp | upper).split("FP").0 | default("") }}'
        fixpack_version: '{{ (tmp_fixpack | trim | length > 0) | ternary("FP" + tmp_fixpack, "") }}'
        interim_version: '{{ (tmp_interim | trim | length > 0) | ternary(interim_string + tmp_interim, "") }}'

    - name: Calculate merged FixPack and Interim Fix versions
      ansible.builtin.set_fact:
        domino_fp_version: '{{ domino_main_version }}{{ fixpack_version }}'
        domino_fp_if_version: '{{ domino_main_version }}{{ fixpack_version }}{{ interim_version }}'

    - name: Rename installed IF version (14.0FP2HF8 -> 14.0FP2IF1)
      ansible.builtin.set_fact:
        domino_fp_if_version: 14.0FP2IF1
      when: domino_fp_if_version == '14.0FP2HF8'

    - name: Rename installed IF version (14.0FP3HF9 -> 14.0FP3IF1)
      ansible.builtin.set_fact:
        domino_fp_if_version: 14.0FP3IF1
      when: domino_fp_if_version == '14.0FP3HF9'

    - name: Rename installed IF version (14.0FP3HF16 -> 14.0FP3IF2)
      ansible.builtin.set_fact:
        domino_fp_if_version: 14.0FP3IF2
      when: domino_fp_if_version == '14.0FP3HF16'

    - name: Rename installed IF version (14.0FP3HF34 -> 14.0FP3IF3)
      ansible.builtin.set_fact:
        domino_fp_if_version: 14.0FP3IF3
      when: domino_fp_if_version == '14.0FP3HF34'

    - name: Rename installed Early Access version (V1450 -> 14.5)
      ansible.builtin.set_fact:
        domino_fp_if_version: 14.5
        domino_main_version: 14.5
      when: domino_fp_if_version == 'V1450'

    - name: Print target versions for Domino, FP and IF
      ansible.builtin.debug:
        msg: |
          domino_main_version: {{ domino_main_version }}
          domino_fixpack: {{ domino_fixpack }}
          domino_interim: {{ domino_interim }}

    # --- Process Domino version

    - name: Process Domino version
      block:
        - name: Mark Domino as installed (single variable) - {{ domino_main_version }}
          ansible.builtin.set_fact:
            domino_is_installed: true

        - name: Mark Domino as installed (sw dictionary)
          vars:
            index: '{{ product_info | ansible.utils.index_of("eq", "domino", "name") }}'
            domino_target_version: '{{ product_info | json_query("[?name==`domino`].version") | first  }}'
            target_version_is_newer: '{{ domino_main_version is version(domino_target_version, "<", version_type="loose") }}'
          ansible.utils.update_fact:
            updates:
              - path: 'product_info.{{ index }}.installed'
                value: true
              - path: 'product_info.{{ index }}.installed_version'
                value: '{{ domino_main_version }}'
              - path: 'product_info.{{ index }}.do_installation'
                value: '{{ target_version_is_newer }}'
          changed_when: false
          register: domino_version_updated_result

        - name: Store the updated value into the master fact
          ansible.builtin.set_fact:
            product_info: '{{ domino_version_updated_result.product_info }}'

    # --- Process FixPack version

    - name: Process FixPack version
      when: (fixpack_version | trim | length > 0) or (domino_fixpack | trim | length > 0)
      block:
        - name: Mark FixPack as installed (single variable) - {{ domino_fp_version }}
          ansible.builtin.set_fact:
            fp_is_installed: true
          when: fixpack_version | trim | length > 0

        - name: Mark FixPack as installed (sw dictionary)
          vars:
            index: '{{ product_info | ansible.utils.index_of("eq", "fp", "name") }}'
            fp_target_version: '{{ domino_main_version }}{{ domino_fixpack }}'
            target_version_is_newer: '{{ domino_fp_version is version(fp_target_version, "<", version_type="loose") }}'
          ansible.utils.update_fact:
            updates:
              - path: 'product_info.{{ index }}.installed'
                value: '{{ fixpack_version | trim | length > 0 }}'
              - path: 'product_info.{{ index }}.installed_version'
                value: '{{ domino_fp_version }}'
              - path: 'product_info.{{ index }}.do_installation'
                value: '{{ target_version_is_newer and (domino_fixpack | trim | length > 0) }}'
          changed_when: false
          register: fixpack_version_updated_result

        - name: Store the updated value into the master fact
          ansible.builtin.set_fact:
            product_info: '{{ fixpack_version_updated_result.product_info }}'

    # --- Process Interim fix version

    - name: Process Interim fix version
      when: (interim_version | trim | length > 0) or (domino_interim | trim | length > 0)
      block:
        - name: Mark Interim fix as installed (single variable) - {{ domino_fp_if_version }}
          ansible.builtin.set_fact:
            if_is_installed: true
          when: interim_version | trim | length > 0

        - name: Mark Interim fix as installed (sw dictionary)
          vars:
            index: '{{ product_info | ansible.utils.index_of("eq", "if", "name") }}'
            if_target_version: '{{ domino_main_version }}{{ domino_fixpack }}{{ domino_interim }}'
            target_version_is_newer: '{{ domino_fp_if_version is version(if_target_version, "<", version_type="loose") }}'
          ansible.utils.update_fact:
            updates:
              - path: 'product_info.{{ index }}.installed'
                value: '{{ interim_version | trim | length > 0 }}'
              - path: 'product_info.{{ index }}.installed_version'
                value: '{{ domino_fp_if_version }}'
              - path: 'product_info.{{ index }}.do_installation'
                value: '{{ target_version_is_newer and (domino_interim | trim | length > 0) }}'
          changed_when: false
          register: interim_version_updated_result

        - name: Store the updated value into the master fact
          ansible.builtin.set_fact:
            product_info: '{{ interim_version_updated_result.product_info }}'

        - name: Change the flag that Interim fix must be uninstalled first before installing any update
          ansible.builtin.set_fact:
            if_uninstall: true
          when:
            - ('HF' in interim_version)
            - domino__install_fp or domino__install_if
            - (product_info | json_query("[?name==`fp`].do_installation") | first) or (product_info | json_query("[?name==`if`].do_installation") | first)
