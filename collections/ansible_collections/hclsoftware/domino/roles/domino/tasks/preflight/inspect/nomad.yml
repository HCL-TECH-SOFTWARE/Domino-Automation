---
- name: Check if Nomad version file exists
  ansible.builtin.stat:
    # path: /opt/hcl/domino/notes/latest/linux/nomad-files/nomad-web-version.txt
    path: /opt/hcl/domino/notes/latest/linux/nomad-server-version.txt
  register: nomad_installed_result

- name: Perform tasks when Nomad server is already installed
  when: nomad_installed_result.stat.exists
  block:
    # Example of the Nomad version written in the file: 14.0.0-1.0.12
    # The command keeps characters to the right from the first dash (-)
    - name: Get Nomad version from a file
      ansible.builtin.shell:
        chdir: /opt/hcl/domino/notes/latest/linux
        # cmd: set -o pipefail && cat nomad-web-version.txt | sed 's|\(.*\)\..*|\1|'
        cmd: set -o pipefail && cat nomad-server-version.txt | cut -d '-' -f2- | sed -e 's/-//g'
      changed_when: false
      register: nomad_version_result

    - name: Store installed Nomad version
      ansible.builtin.set_fact:
        nomad_version: '{{ nomad_version_result.stdout }}'

    - name: Rename installed Nomad version (1.0.13.2 -> 1.0.13IF2)
      ansible.builtin.set_fact:
        nomad_version: 1.0.13IF2
      when: nomad_version == '1.0.13.2'

    - name: Mark Nomad as installed (single variable)
      ansible.builtin.set_fact:
        nomad_is_installed: true

    - name: Mark Nomad as installed (sw dictionary)
      vars:
        index: '{{ product_info | ansible.utils.index_of("eq", "nomad", "name") }}'
        nomad_target_version: '{{ product_info | json_query("[?name==`nomad`].version") | first  }}'
        target_version_is_newer: '{{ nomad_version is version(nomad_target_version, "<", version_type="loose") }}'
      ansible.utils.update_fact:
        updates:
          - path: 'product_info.{{ index }}.installed'
            value: true
          - path: 'product_info.{{ index }}.installed_version'
            value: '{{ nomad_version }}'
          - path: 'product_info.{{ index }}.do_installation'
            value: '{{ target_version_is_newer }}'
      changed_when: false
      register: product_info_updated_result

    - name: Store the updated value into the master fact
      ansible.builtin.set_fact:
        product_info: '{{ product_info_updated_result.product_info }}'
