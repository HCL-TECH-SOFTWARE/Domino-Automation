---
- name: Check that at least one Domino Leap binary file exists
  ansible.builtin.find:
    paths: /opt/hcl/domino/notes/latest/linux/osgi/volt/eclipse/plugins
    patterns: 'dleap-*.jar'
    file_type: file
    recurse: false
  register: leap_find_result

- name: Perform tasks when Domino Leap server is already installed
  when: leap_find_result.matched > 0
  block:
    - name: Get version from the Domino Leap binary filename
      vars:
        # Sort the list of all dleap-*.jar files and take the last one (with the highest version)
        # Example of a file name: dleap-1.1.4.3.jar
        leap_filename: '{{ leap_find_result.files | json_query("[*].path") | sort | last | basename }}'
        # Remove last 4 chracters (".jar")
        leap_filename_short: '{{ leap_filename[:-4] }}'
      ansible.builtin.set_fact:
        # Keep only chars after dash ("-")
        leap_version: '{{ leap_filename_short.split("-")[1] }}'
        sh: '{{ leap_filename_short }}'

    - name: Rename installed Leap version (1.1.7.29 -> 1.1.7)
      ansible.builtin.set_fact:
        leap_version: '1.1.7'
      when: leap_version == '1.1.7.29'

    - name: Rename installed Leap version (1.1.7.33 -> 1.1.7IF1)
      ansible.builtin.set_fact:
        leap_version: '1.1.7IF1'
      when: leap_version == '1.1.7.33'

    - name: Mark Domino Leap as installed (single variable)
      ansible.builtin.set_fact:
        leap_is_installed: true

    - name: Mark Domino Leap as installed (sw dictionary)
      vars:
        index: '{{ product_info | ansible.utils.index_of("eq", "leap", "name") }}'
        leap_target_version: '{{ product_info | json_query("[?name==`leap`].version") | first }}'
        target_version_is_newer: '{{ leap_version is version(leap_target_version, "<", version_type="loose") }}'
      ansible.utils.update_fact:
        updates:
          - path: 'product_info.{{ index }}.installed'
            value: true
          - path: 'product_info.{{ index }}.installed_version'
            value: '{{ leap_version }}'
          - path: 'product_info.{{ index }}.do_installation'
            value: '{{ target_version_is_newer }}'
      changed_when: false
      register: product_info_updated_result

    - name: Store the updated value into the master fact
      ansible.builtin.set_fact:
        product_info: '{{ product_info_updated_result.product_info }}'
