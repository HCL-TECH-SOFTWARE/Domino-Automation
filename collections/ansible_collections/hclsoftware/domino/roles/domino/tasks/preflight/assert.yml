---
- name: Check supported OS
  ansible.builtin.assert:
    that:
      - (ansible_os_family | lower) in domino__supported_os
    success_msg: "The server is running supported OS: {{ ansible_os_family }}"
    fail_msg: |
      The server is not running supported OS: {{ ansible_os_family }}.
      Only RedHat-like OS is supported as of now.


# ---------- CHECK MANDATORY PARAMETER VALUES

- name: Check mandatory parameters
  vars:
    common__param_name: '{{ param.name }}'
    common__param_type: '{{ param.type }}'
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_parameter
  loop:
    - { name: domino__server_name, type: alphanumeric }
    - { name: domino__install_path, type: path }
    - { name: domino__software_dir, type: path }
    - { name: domino__install_products, type: list }
    - { name: domino__install_startup_script, type: boolean }
    - { name: domino__install_ontime, type: boolean }
    - { name: domino__input_data_location, type: path }
    - { name: domino__server_name, type: alphanumeric-ext }
    - { name: domino__domino_hostname, type: hostname }
    - { name: domino__domino_domain, type: alphanumeric }
    - { name: domino__org_name, type: alphanumeric }
    - { name: domino__certifier_password, type: alphanumeric-ext }
    - { name: domino__admin_password, type: alphanumeric-ext }
    - { name: domino__use_existing_server_id, type: boolean }
    - { name: domino__use_existing_certifier_id, type: boolean }
    - { name: domino__use_existing_admin_id, type: boolean }
    - { name: domino__register_users, type: boolean }
    - { name: domino__input_data_users, type: filename }
    - { name: domino__create_microca, type: boolean }
    - { name: domino__enable_dkim, type: boolean }
    - { name: domino__enable_dkim, type: alphanumeric-ext }
    - { name: domino__restart_after_setup, type: boolean }
    - { name: domino__wait_mins_after_restart, type: number }
    - { name: domino__setup_additional_servers, type: boolean }
    - { name: domino__install_as_additional, type: boolean }
    - { name: domino__sametime_server, type: hostname }
    - { name: domino__connections_server, type: hostname }
  loop_control:
    loop_var: param


# ---------- CHECK OPTIONAL PARAMETER VALUES

- name: Check Custom login form parameters
  vars:
    common__param_name: '{{ param.name }}'
    common__param_type: '{{ param.type }}'
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_parameter
  loop:
    - { name: domino__custom_login_db, type: filename }
    - { name: domino__custom_login_form, type: alphanumeric-ext }
  loop_control:
    loop_var: param
  when:
    - domino__use_custom_login

- name: Check Register additional servers parameter
  vars:
    common__param_name: '{{ param.name }}'
    common__param_type: '{{ param.type }}'
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_parameter
  loop:
    - { name: domino__additional_servers, type: list }
  loop_control:
    loop_var: param
  when:
    - domino__setup_additional_servers

- name: Check Install as additional server parameter
  vars:
    common__param_name: '{{ param.name }}'
    common__param_type: '{{ param.type }}'
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_parameter
  loop:
    - { name: domino__existing_server_name, type: string }
    - { name: domino__existing_server_address, type: string }
  loop_control:
    loop_var: param
  when:
    - domino__install_as_additional


# ---------- CHECK THE SPECIAL PARAMETERS COMBINATION

- name: Check that cert.id is selected together with server.id
  ansible.builtin.assert:
    that:
      - domino__use_existing_certifier_id is defined
      - domino__use_existing_certifier_id
    fail_msg: '"domino__use_existing_certifier_id" must be set as true when you enabled "domino__use_existing_server_id"'
    success_msg: '"domino__use_existing_certifier_id" is defined correctly: {{ domino__use_existing_certifier_id }}'
  when: domino__use_existing_server_id

- name: Check that cert.id is selected together with admin.id
  ansible.builtin.assert:
    that:
      - domino__use_existing_certifier_id is defined
      - domino__use_existing_certifier_id
    fail_msg: '"domino__use_existing_certifier_id" must be set as true when you enabled "domino__use_existing_admin_id"'
    success_msg: '"domino__use_existing_certifier_id" is defined correctly: {{ domino__use_existing_certifier_id }}'
  when: domino__use_existing_admin_id

- name: Check that only one parameter is selected for additional servers
  ansible.builtin.fail:
    msg: |
      Both "domino__setup_additional_servers" and "domino__install_as_additional"
      parameters are set as True.
      Only one can be set as True, or both set as False.
  when:
    - domino__setup_additional_servers
    - domino__install_as_additional

- name: Check that at least one additional server is specified
  ansible.builtin.assert:
    that:
      - domino__additional_servers | length > 0
    fail_msg: '"domino__additional_servers" must contain at least one server name "{{ domino__additional_servers }}"'
    success_msg: '"domino__additional_servers" is defined correctly: {{ domino__additional_servers }}'
  when: domino__setup_additional_servers


# ---------- CHECK THAT FILES AND DIRECTORIES EXIST

- name: Check directories
  vars:
    common__dir_name: '{{ dir }}'
  ansible.builtin.include_role:
    name: common
    tasks_from: assert_directory
  loop:
    - domino__software_dir
    - domino__input_data_location
  loop_control:
    loop_var: dir

- name: Check reports directory
  vars:
    common__dir_name: domino__reports_dir
  ansible.builtin.include_role:
    name: common
    tasks_from: assert_directory
  when: domino__save_reports

- name: Check certifier ID file [{{ domino__cert_id }}]
  vars:
    common__file_name: domino__cert_id
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_file
  when:
    - domino__use_existing_certifier_id

- name: Check server ID file [{{ domino__server_id }}]
  vars:
    common__file_name: domino__server_id
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_file
  when:
    - domino__use_existing_server_id

- name: Check admin ID file [{{ domino__admin_id }}]
  vars:
    common__file_name: domino__admin_id
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_file
  when:
    - domino__use_existing_admin_id

- name: Check user CSV file
  vars:
    common__file_name: domino__input_data_users
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_file
  when:
    - domino__register_users

- name: Check custom login form database file [{{ domino__custom_login_db }}]
  vars:
    common__file_name: domino__custom_login_db
  ansible.builtin.include_role:
    name: hclsoftware.domino.common
    tasks_from: assert_file
  when:
    - domino__use_custom_login
